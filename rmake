#!/bin/bash

### USAGE

# please set to 80 chars wide

user=$(whoami)

make_changes="
Options for the make call have been converted to lower case.
These are the changes (* = arg):

   -I *	include dir		->	-a *
   -B	unconditional make	->	-b
   -L	check symlink times	->	-m
   -W *	consider always new	->	-z *

 X -C 	Ignored (no use)
 X -f	Disabled; we need symlinks named 'Makefile'
 X -j/l Not useful; exit here.
 X -r/R Built-in rules/variables aren't used in our applications, no reason to
	disable them.
 X -S	Ignored, '-k' is never inherited in context.
"

usage() {
	cat <<-EOF

		This is the help file for rmake. To access make's help, use rmake -h.

		Note rmake will automatically prepend 's' to IDs that start with a
		number. qsub won't accept jobs that start with a number.

		Options to rmake (* = arg):
		-----------------

		   -C	Print only the changes to flags to make
		   -D	qsub recon; don't submit qsub job.
		   -H	Print this help message and exit.
		   -M   Debug; print arguments to make call. (No qsub submission.)
		   -N *	Set job name; if not set, it will be set to target, then a
				random name.
		   -O   Save output/error files to qsub-[out|err] directories.
		   -P   Append <date>_<time> to the jobid.
		   -S *	Run qsub on these subjects only; if not set, run on all.
		   -T *	Set the target for make.

		Options to make:
		----------------
		$make_changes
EOF
}

make_changes(){
	echo "$make_changes"
}

errcho(){
	# Send message to stderr
	echo "$1" >&2
}

### ACTUAL CODE

# Make sure directory is set up for recursive make, which our script relies on.
if [ ! -f Makefile ]
then
	errcho
	errcho "In order to run rmake, make needs to be able to run recursively."
	errcho "Please set up a recursive makefile in $PWD named 'Makefile'."
	errcho
	exit 1
fi

# Run rmake without arguments, but warn user.
if [ $# -eq 0 ]
then
    errcho "No parameters supplied. Please set a target."
    exit 1
fi

# Give a phony name, incase they run it without a target
name=$(pwgen 5 1)

# Find only in one and below
## -L traverses symlinks
subjects=$(find -L . -mindepth 2 -maxdepth 2 -name 'Makefile' | \
	sed -e 's|/Makefile||' -e 's|./||')

makeparam=
quit=
MAKETARGET=''
testmake=n
setdate=n

while getopts ":abde:hijklmno:pqstvwz:CDHMN:OPS:T:" opt
do
	case $opt in

#	Options to make
	a) makeparam=$makeparam" --include-dir=$OPTARG" ;;
	b) makeparam=$makeparam" --always-make" ;;
	d) makeparam=$makeparam" --debug" ;;
	e) makeparam=$makeparam" --environment-overrides" ;;
	h) make --help ; make_changes
		exit 0 ;;
	i) makeparam=$makeparam" --ignore errors" ;;
	j|l) echo "You can't parallize make while using SGE!"
		exit 11 ;;
	k) makeparam=$makeparam" --keep-going" ;;
	m) makeparam=$makeparam" --check-symlink-times" ;;
	n) makeparam=$makeparam" --recon" ;;
	o) makeparam=$makeparam" --old-file=$OPTARG" ;;
	p) makeparam=$makeparam" --print-data-base" ;;
	q) makeparam=$makeparam" --question" ;;
	s) makeparam=$makeparam" --silent" ;;
	t) makeparam=$makeparam" --touch" ;;
	v) make --version
		exit 0 ;;
	w) make --print-directory
		exit 0 ;;
	z) makeparam=$makeparam" --what-if=$OPTARG" ;;

#	Options to rmake
	C) make_changes
		exit 0 ;;
	D) quit='-verify' ;;
	H) usage
		exit 0 ;;
	M) testmake=y ;;
	N) name=$OPTARG ;;
	O) oedirs=y ;;
	P) setdate=y
		date=$(date +%y%m%d-%H-%I) ;;
	S) subjects="$OPTARG"
		# Sanity check argument to subjects.
		subjnum=$(echo $subjects | wc -w)
		if [ $subjnum -eq 1 ]
		then
			echo -en "\n!--- Only one argument to -S; ensure your argument" >&2
			echo -e " is quoted. ---!\n" 									>&2
		fi ;;
	T) MAKETARGET="$OPTARG"
		name=$(echo $OPTARG | sed 's/[[:space:]]/,/g' ) ;;

	?) errcho "-$OPTARG is not a valid rmake flag (or is missing an argument)."
		usage
		exit 11 ;;
	esac
done

# Conform whitespace; who knows what you're gonna get.
subjects=$(echo $subjects | tr '\n' ' ' | sed -e 's/[[:space:]]+/ /g')
echo "Subjects: $subjects"

# Wait until here to echo make flags so we get them all.
if [[ $testmake == y ]]
then
	echo make "<subj> TARGET=\"$MAKETARGET\" $makeparam"
	exit 0
fi

if [[ $setdate == y ]]
then
	name=${name}.${date}
fi

# Submit subjects individually to SGE
for subj in $subjects
do
	prefix=
	if [[ "$subj" =~ ^[0-9] ]]
	then
		echo "Adding s to subject ID."
		prefix="s"
	fi

	if [[ $oedirs == y ]]
	then
		mkdir -p qout-${user} qerr-${user}

		qsub $quit -S /bin/bash <<-EOF
			#SGE submission options
			#$ -cwd
			#$ -V
			#$ -N ${prefix}${subj}.${name}
			#$ -o qout-${user}
			#$ -e qerr-${user}

			make ${subj} TARGET="${MAKETARGET}" ${makeparam}
		EOF
	else
		qsub $quit -S /bin/bash <<-EOF
			#SGE submission options
			#$ -cwd
			#$ -V
			#$ -N ${prefix}${subj}.${name}

			make ${subj} TARGET="${MAKETARGET}" ${makeparam}
		EOF
	fi

done

if [[ $quit != '-verify' ]]
then
	echo "$(echo $subjects | wc -w) jobs submitted."
fi
